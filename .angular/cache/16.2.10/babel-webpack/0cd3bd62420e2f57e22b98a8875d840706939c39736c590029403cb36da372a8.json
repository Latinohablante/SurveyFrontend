{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ErrorInterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      console.error(error);\n      return throwError(() => error);\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptorService_Factory(t) {\n    return new (t || ErrorInterceptorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptorService,\n    factory: ErrorInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","ErrorInterceptorService","constructor","intercept","req","next","handle","pipe","error","console","_","_2","factory","ɵfac","providedIn"],"sources":["/home/camper/Documentos/SurveyFrontend/src/app/services/auth/error-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorInterceptorService implements HttpInterceptor{\n\n  constructor() { }\n  \n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError(error => {\n        console.error(error);\n        return throwError(()=>error);\n      })\n    )\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;AAKzD,OAAM,MAAOC,uBAAuB;EAElCC,YAAA,GAAgB;EAEhBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOR,UAAU,CAAC,MAAIQ,KAAK,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;EAAC,QAAAE,CAAA,G;qBAXUT,uBAAuB;EAAA;EAAA,QAAAU,EAAA,G;WAAvBV,uBAAuB;IAAAW,OAAA,EAAvBX,uBAAuB,CAAAY,IAAA;IAAAC,UAAA,EAFtB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}